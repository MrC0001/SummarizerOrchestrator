package com.local.SummarizerOrchestrator.services;

import com.local.SummarizerOrchestrator.dtos.SummarizationRequestDTO;
import com.local.SummarizerOrchestrator.dtos.SummarizationResponseDTO;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.springframework.http.ResponseEntity;

import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

/**
 * Service interface for managing summarization operations.
 * Defines methods for handling summarization requests, responses, and storage.
 */
public interface SummarizationService {

    /**
     * Retrieves summaries for a specific transcript and formats the response.
     *
     * @param transcriptId The ID of the transcript whose summaries are being retrieved.
     * @return A ResponseEntity containing:
     *         <ul>
     *           <li>The list of summaries associated with the transcript, if available.</li>
     *           <li>An appropriate error message if no summaries exist or the transcript is not found.</li>
     *         </ul>
     */
    ResponseEntity<?> getSummariesResponse(Long transcriptId);

    /**
     * Compares old and new summaries for a given transcript.
     *
     * @param request The summarization request DTO containing the input data for comparison.
     * @return A map containing:
     *         <ul>
     *           <li><b>oldSummaries:</b> The summaries previously generated for the transcript.</li>
     *           <li><b>newSummaries:</b> The summaries generated during this request, including error messages for failed providers.</li>
     *         </ul>
     */
    Map<String, Object> compareSummaries(SummarizationRequestDTO request);

    /**
     * Overwrites existing summaries for a specific transcript with new summaries.
     *
     * @param transcriptId The ID of the transcript whose summaries are being overwritten.
     * @param newSummaries The new summaries to save.
     */
    void overwriteSummaries(Long transcriptId, List<SummarizationResponseDTO> newSummaries);

    /**
     * Checks if summaries exist for a specific transcript.
     *
     * @param transcriptId The ID of the transcript.
     * @return {@code true} if summaries exist, {@code false} otherwise.
     */
    boolean summariesExistForTranscript(Long transcriptId);

    /**
     * Processes a summarization request asynchronously, generates summaries using providers,
     * and saves the results to the database. Only valid summaries (those without errors) are saved.
     *
     * @param request The summarization request DTO, containing the transcript ID and additional parameters.
     *                Must not be {@code null}.
     * @return A {@link CompletableFuture} containing a list of {@link SummarizationResponseDTO}, which
     *         includes valid summaries generated by all configured providers. Error messages are returned
     *         as summaries for providers that fail.
     * @throws IllegalArgumentException If the provided request is {@code null} or contains invalid data.
     */
    CompletableFuture<Map<String, Object>> summarizeAndSaveAsync(@Valid @NotNull SummarizationRequestDTO request);


    /**
     * Dynamically distributes a summarization request across all configured providers,
     * building custom payloads for each provider and aggregating results.
     *
     * @param request The base summarization request DTO.
     * @return A list of {@link SummarizationResponseDTO} objects containing:
     *         <ul>
     *           <li>Provider-specific summaries.</li>
     *           <li>Error messages for any provider that fails.</li>
     *         </ul>
     */
    List<SummarizationResponseDTO> summarizeAcrossProviders(SummarizationRequestDTO request);
}
