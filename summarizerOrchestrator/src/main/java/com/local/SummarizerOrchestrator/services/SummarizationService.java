package com.local.SummarizerOrchestrator.services;

import com.local.SummarizerOrchestrator.dtos.SummarizationRequestDTO;
import com.local.SummarizerOrchestrator.dtos.SummarizationResponseDTO;
import org.springframework.http.ResponseEntity;

import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;


/**
 * Service interface for managing summarization operations.
 * Defines methods for handling summarization requests, responses, and storage.
 */
public interface SummarizationService {


    /**
     * Retrieves summaries for a specific transcript and formats the response.
     *
     * @param transcriptId The ID of the transcript whose summaries are being retrieved.
     * @return A ResponseEntity containing the summaries and transcript data.
     */
    ResponseEntity<?> getSummariesResponse(Long transcriptId);

    /**
     * Compares old and new summaries for a given transcript.
     *
     * @param request The summarization request DTO containing the input data for comparison.
     * @return A map containing old and new summaries for comparison.
     */
    Map<String, Object> compareSummaries(SummarizationRequestDTO request);

    /**
     * Overwrites existing summaries for a specific transcript with new summaries.
     *
     * @param transcriptId The ID of the transcript whose summaries are being overwritten.
     * @param newSummaries The new summaries to save.
     */
    void overwriteSummaries(Long transcriptId, List<SummarizationResponseDTO> newSummaries);

    /**
     * Checks if summaries exist for a specific transcript.
     *
     * @param transcriptId The ID of the transcript.
     * @return {@code true} if summaries exist, {@code false} otherwise.
     */
    boolean summariesExistForTranscript(Long transcriptId);

    /**
     * Processes a summarization request asynchronously, generates summaries using providers,
     * and saves the results to the database. Only valid summaries (those without errors) are saved.
     *
     * <p>This method enables non-blocking execution, allowing the application to handle other
     * tasks while the summarization process is ongoing.</p>
     *
     * @param request The summarization request DTO, containing the transcript ID and additional parameters.
     *                Must not be {@code null}.
     * @return A {@link CompletableFuture} containing a list of {@link SummarizationResponseDTO}, which
     *         includes summaries generated by all configured providers.
     * @throws IllegalArgumentException If the provided request is {@code null} or contains invalid data.
     */
    CompletableFuture<List<SummarizationResponseDTO>> summarizeAndSaveAsync(SummarizationRequestDTO request);

}

